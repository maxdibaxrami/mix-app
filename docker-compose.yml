version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432" # Expose for local access (optional)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    env_file:
      - .env

  nestjs-app:
    build:
      context: ./backend
      dockerfile: Dockerfile  # Specify the Dockerfile explicitly
    container_name: nestjs_app
    ports:
      - "3000:3000"
    depends_on:
      - db
    environment:
      DATABASE_HOST: db  # Internal service name for DB
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      NODE_ENV: production
    networks:
      - app_network
    volumes:
      - ./backend/uploads:/usr/src/app/uploads # Mount only necessary folders
    command: npm run start:prod # Start in production mode
    env_file:
      - ./backend/.env

  react-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile  # Specify the Dockerfile explicitly
    container_name: react_app
    ports:
      - "80:80" # React app is served by Nginx on port 80
    networks:
      - app_network
    depends_on:
      - nestjs-app
    volumes:
      - react_build:/usr/share/nginx/html  # Mount the build artifacts for Nginx

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80" # Expose port 80 for React app through Nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Mount your custom Nginx config file
      - react_build:/usr/share/nginx/html  # Mount React build output from volume
    depends_on:
      - react-app # Nginx depends on React build being available
      - nestjs-app
    networks:
      - app_network
    restart: always

volumes:
  postgres_data:
  react_build:  # Persistent volume for the React build output

networks:
  app_network:
    driver: bridge
